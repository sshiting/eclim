# Copyright (C) 2012 - 2013  Eric Van Dewoestine
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

python.interpreter.added=Added interpreter: {0}
python.interpreter.removed=Removed interpreter: {0}
python.interpreter.exists=Interpreter already exists: {0}
python.interpreter.not.found=Unable to find interpreter: {0}

######### Setting Descriptions #########
#org.eclim.python.builtins=\
#  Json dict containing a mapping of any user defined builtins and the\n\
#  fully qualified name of the module, object, function, etc they correspond to.\n\
#  Useful if you have some intialization in your project which adds frequently\n\
#  used modules, etc to your environment's builtins\n\
#  Ex. {"json": "json", "logger": "util.logger"}

org.eclim.python.ignore.unresolved.imports=\
  Json array of fully qualified names which will not be flagged as\n\
  unresolved import errors when validating a source file. Useful for\n\
  dealing with imports that can only be resolved at runtime.\n\
  Ex. ["bottle.get", "bottle.post"]\n\
  Note: if you want to ignore all unresolved import errors, simply\n\
  create a single "*" entry.
org.eclim.python.ignore.builtin.reserved=\
  Json array of builtin names which will not be flagged when\n\
  an assignment is made to a variable of the same name, such as\n\
  'type = 1'.\n\
  Ex. ["license", "type"]\n\
  Note: if you want to ignore assignments to any builtin name,\n\
  simply create a single "*" entry.

######### Option Descriptions #########
org.python.pydev.TAB_WIDTH=\
  The number of spaces used for indentation.
com.python.pydev.analysis.NAMES_TO_CONSIDER_GLOBALS=\
  Consider the following names as globals: (comma separated)
com.python.pydev.analysis.NAMES_TO_IGNORE_UNUSED_VARIABLE=\
  Don''t report unused variable if name starts with: (comma separated)
com.python.pydev.analysis.NAMES_TO_IGNORE_UNUSED_IMPORT=\
  Don''t report unused imports in modules named: (comma separated)
